# Static :Library creation
# AUTHOR:SUBRAT(V1.0)
#----------------------------
# NOTES:
# We may have to modify following attributes.
# 1. TARGET_NAME: Actual output file name (binary/library)
# 2. MODULE_NAME: <Module name/Source file name>. Keep source_filename.cpp & source_filename.h for simplicity
# 3. PROJ_ROOT_DIR: If module is in src/module_folder/module.cpp, No need to do any change. This is a relative path. Make sure Makefile and the obj folder should be aligned properly.If required add ../
# 4. DEP_LIBS: If your module is dependent on other libraries, keep it here with space
#                Ex: DEP_LIBS = -lm -lzmq -lcustomzmq
# 5. OBJ_{N}: Depending upon the source files we need to modify the
# value of N
# 6. intall: To copy the binaries, .so, .a and header files to the destination bin,lib & share_headers
# folder. 

# NOTES:
#   1. Use CXX for C++ program and CC for C program
#   2. If using C program, replace $CXX with $CC
#Most of the third-party libraries uses this convension.
#************************************************************************

BUILD_TYPE = $(RELEASE)
#BUILD_TYPE = $(DEBUG)
TARGET_NAME = employee
MODULE_NAME = employee

PROJ_ROOT_DIR = ../..
OBJ_DIR = $(PROJ_ROOT_DIR)/objs/$(MODULE_NAME)

#*****DONT MODIFY BELOW ATTRIBUTES****#
BUILD_TIMESTAMP = $(shell date +'%d-%m-%Y.%H-%M-%S.%N')

INSTALLATION_PATH = $(shell echo $$INSTALLATION_PATH)
ifeq ($(INSTALLATION_PATH),)
        INSTALLATION_PATH = $(PROJ_ROOT_DIR)
#       INSTALLATION_PATH = /usr/local/mycustombuild

endif

TARGET_DIR = $(INSTALLATION_PATH)/libs
TARGET = $(TARGET_DIR)/lib$(TARGET_NAME).a

# C++ compiler
CXX = $(shell echo $$CXX)
ifeq ($(CXX),)
CXX = g++
endif

LDXX = ar rcs 

STDFLAG = -std=c++17

#*****DONT MODIFY ABOVE ATTRIBUTES****#
#COME HERE#
SOURCE_1 = $(MODULE_NAME).cpp

OBJ_1 = $(OBJ_DIR)/$(MODULE_NAME).o

ALL_OBJS = $(OBJ_1)

INC = -I./ -I$(PROJ_ROOT_DIR)/shared_headers


#choose release/debug
DEBUG = -pipe -g -Wall -W -fPIC
RELEASE = -pipe -O2 -Wall -W -fPIC

# -D stands for DEFINE. If want to define any macro which is used in code for timestamp or git revision etc, can be used in this way.
CC_OPT = -DBUILD_TIMESTAMP_STR=\"$(BUILD_TIMESTAMP)\" -DINSTALLATION_PATH_STR=\"$(INSTALLATION_PATH)\"

#UNCOMMENT IF LIKE TO SEE FOLLOWING WARNINGS. ATLEAST ONCE THIS NEEDS TO BE RUN FOR EACH MODULE
WARN=-Wall -Wextra -Werror -Wwrite-strings -Wno-parentheses -pedantic -Warray-bounds -Wno-unused-variable -Wno-unused-function -Wno-unused-parameter -Wno-unused-result

CCFLAGS = $(STDFLAG) $(BUILD_TYPE) $(CC_OPT) $(WARN) $(INC)

# Add dependency library here by speparating them with space. Below example is to add libzmq & libm
#Add the "<path-to-library> -llibaryname" by keeping space in between as shown below
#DEP_LIBS = -lzmq -lm -L$(LIBRARY_DIR) -lcustomlib

# RPATH IS USED FOR LINKING USER DEFINED LIBS IN SPECIFIC PATH DURING
# BUILDING THE MODULE.It is needed for the User of the .so. Unit test binary may use it.
#RPATH="-Wl,-rpath,$(TARGET_DIR):$(TARGET_DIR)/3rd_party_lib"
RPATH="-Wl,-rpath,$(TARGET_DIR)"

LDFLAGS = $(DEP_LIBS) $(RPATH)

all: $(TARGET)

$(TARGET): $(ALL_OBJS)
	$(LDXX) $@ $^ 

$(OBJ_1): $(SOURCE_1)
	$(CXX) -c $(CCFLAGS) -o $@ -c $<

build_dir:
	@echo Creating object directory if not exist
	mkdir -p $(OBJ_DIR)

clean:
	@echo Clean Build
	rm $(ALL_OBJS)
	rm -f $(TARGET)

install:
	rsync -avz *.h $(PROJ_ROOT_DIR)/share_headers/

.PHONY: clean build_dir test all install
